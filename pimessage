#!/usr/bin/python

import subprocess # for function calls
import os
import string
import re # for searching

IP_FAILURE = "NULL"
## make sure indents are 4 spaces if possible
## vim settings:
##              set et
##              set ts=4

"""
Docmentation section.

Todo

"""

def getHostIp():
    # returns IP_FAILURE if no address was found

    ipaddress = IP_FAILURE # default case
    cmdOutput = subprocess.Popen('ifconfig', stdout=subprocess.PIPE).communicate()[0]
    #print cmdOutput


    inetsub = cmdOutput.find("inet")
    if (inetsub == -1): # not connected to internet
        return IP_FAILURE
    
    # slice the cmdOutput string:
    modifiedOutput = cmdOutput[inetsub:]

    colonsub = modifiedOutput.find(':')
    if (colonsub == -1): # not connected to internet
        return IP_FAILURE
    
    # slice the cmdOutput string:
    modifiedOutput = modifiedOutput[colonsub+1:]



    ## perhaps there is a good way to clean this up? ##
    match_object = re.search('\d', modifiedOutput)
    if match_object: # it returned a match
        startSub = match_object.start()
    else:
        return IP_FAILURE
    
    match_object = re.search(' ', modifiedOutput)
    if match_object: # it returned a match
        endSub = match_object.start()
    else:
        return IP_FAILURE

    ipaddress = modifiedOutput[startSub:endSub-1]
    return ipaddress # default is IP_FAILURE


def welcomeScreen(ip, width):
    # clear screen
    os.system('clear')

    print(string.center("Welcome to piMessage", width))
    print("")

    # Raspberry Pi logo
    print(string.center(".~~.   .~~.", width))
    print(string.center("'. \ ' ' / .'", width))
    print(string.center(".~ .~~~..~.", width))
    print(string.center(": .~.'~'.~. :", width))
    print(string.center("~ (   ) (   ) ~", width))
    print(string.center("( : '~'.~.'~' : )", width))
    print(string.center("~ .~ (   ) ~. ~", width))
    print(string.center("(  : '~' :  )", width))
    print(string.center("'~ .~~~. ~'", width))
    print(string.center("'~'", width))
    print("")
    print("    To connect to a friend, exchange IP addresses with them.")
    #print "    Your IP Address is:", ip


    print("")
    raw_input("Press enter to continue... ")
    return 0



def sendMessage():
    # todo
    return 0

def mainScreen():
    # displays various conversations like texting apps do
    # perhaps displays a snippet of the last message with that person
    
    # todo
    return 0

def initNewUser(user):
    # make the directory
    mdCommand = "mkdir /home/" + user + "/.pimessage/"
    result = os.system(mdCommand)
    if result != 0:
        print("Error!")
    # write info to files


    return result



def main():
    ## Get user information ##
    username = subprocess.Popen('whoami', stdout=subprocess.PIPE).communicate()[0]
    username = username.rstrip('\n') # removes trailing newline
    dataDir = "/home/" + username + "/.pimessage/"
    dirExistsCommand = "test -d " + dataDir
    if os.system(dirExistsCommand) != 0:
        initNewUser(username)

    hostIp = getHostIp()

    # get number of rows and number of columns on terminal
    screenRows, screenColumns = os.popen('stty size', 'r').read().split()
    screenRows = int(screenRows)
    screenColumns = int(screenColumns)

    # User must already have information entered

    print "screenColumns is", screenColumns
    keyPress = welcomeScreen(hostIp, screenColumns)



    # implement

    mainScreen()










if __name__ == "__main__":
    main()

exit(0)
