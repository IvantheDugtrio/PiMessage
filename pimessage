#!/usr/bin/python

"""
A messaging program between two Linux systems, optimized for the raspberry
pi running raspbian OS.

2014 Nate Fischer, Ivan De Dios

"""

import subprocess # for function calls
import os
import string
import re # for searching

########################
##  Global constants  ##
########################

IP_FAILURE = 1
DIR_FAILURE = 2


## make sure indents are 4 spaces if possible
## vim settings:
##              set et
##              set ts=4

## perhaps an IPaddress class? This would mean changing some variable names


def mdUnix(name):
    if os.system("mkdir " + name) != 0:
        return DIR_FAILURE
    else:
        return 0


def getHostIp():
    # returns IP_FAILURE if no address was found

    ipaddress = IP_FAILURE # default case
    cmdOutput = subprocess.Popen('ifconfig', stdout=subprocess.PIPE).communicate()[0]
    #print cmdOutput


    inetsub = cmdOutput.find("inet")
    if (inetsub == -1): # not connected to internet
        return IP_FAILURE

    # slice the cmdOutput string:
    modifiedOutput = cmdOutput[inetsub:]

    colonsub = modifiedOutput.find(':')
    if (colonsub == -1): # not connected to internet
        return IP_FAILURE

    # slice the cmdOutput string:
    modifiedOutput = modifiedOutput[colonsub+1:]

    ## perhaps there is a good way to clean this up? ##
    match_object = re.search('\d', modifiedOutput)
    if match_object: # it returned a match
        startSub = match_object.start()
    else:
        return IP_FAILURE

    match_object = re.search(' ', modifiedOutput)
    if match_object: # it returned a match
        endSub = match_object.start()
    else:
        return IP_FAILURE

    ipaddress = modifiedOutput[startSub:endSub-1]
    return ipaddress # default is IP_FAILURE


def welcomeScreen(ip, width):
    # clear screen
    os.system('clear')

    print(string.center("Welcome to piMessage", width))
    print("")

    # Raspberry Pi logo
    print(string.center("   .~~.   .~~.   ", width))
    print(string.center("  '. \ ' ' / .'  ", width))
    print(string.center("   .~ .~~~..~.   ", width))
    print(string.center("  : .~.'~'.~. :  ", width))
    print(string.center(" ~ (   ) (   ) ~ ", width))
    print(string.center("( : '~'.~.'~' : )", width))
    print(string.center(" ~ .~ (   ) ~. ~ ", width))
    print(string.center("  (  : '~' :  )  ", width))
    print(string.center("   '~ .~~~. ~'   ", width))
    print(string.center("       '~'       ", width))
    print("")

    ipString = "Your IP Address is: "+ip
    print(ipString.center(width))
    print(string.center("To connect to a friend, exchange IP addresses with them.", width))

    print("")
    raw_input("Press enter to continue... ")
    return 0



def sendMessage():
    # todo
    return 0

def mainScreen():
    # displays various conversations like texting apps do
    # perhaps displays a snippet of the last message with that person

    # todo
    return 0

def initNewUser(user, homedir):
    # make the directory
    if mdUnix(homedir) == DIR_FAILURE:
        exit(DIR_FAILURE)


    # generate user's keys
    # todo


    # write info to files
    open(homedir+"editor", 'w').write("vim") # doesn't terminate in newline

    if mdUnix(homedir+"conversations/") == DIR_FAILURE:
        exit(DIR_FAILURE)
    # change permissions of conversations
    os.system("chmod 700 " + homedir + "conversations/")


    return 0



def main():
    ## Get user information ##
    username = subprocess.Popen('whoami', stdout=subprocess.PIPE).communicate()[0]
    # fails for non-unix systems

    username = username.rstrip('\n') # removes trailing newline
    dataDir = "/home/" + username + "/.pimessage/"
    dirExistsCommand = "test -d " + dataDir
    if os.system(dirExistsCommand) != 0:
        initNewUser(username, dataDir)

    hostIp = getHostIp()
    editCommand = open(dataDir+"editor", 'r').read()

    # get number of rows and number of columns on terminal
    screenRows, screenColumns = os.popen('stty size', 'r').read().split()
    screenRows = int(screenRows)
    screenColumns = int(screenColumns)


    ## User must already have information entered

    keyPress = welcomeScreen(hostIp, screenColumns)



    # implement

    mainScreen()










if __name__ == "__main__":
    main()
    exit(0)
